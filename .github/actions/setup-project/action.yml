# --------------------------------------------------------------------------------------------------
# This GitHub Actions workflow file defines a reusable workflow that can be shared across jobs.
# It prepares an environment specific version of "google-services.json" and places into the proper
# location on the file system.
# --------------------------------------------------------------------------------------------------

name: Setup project
description: Execute common steps such as code checkout, configuration files, etc.

inputs:
    google_services_json:
        description: The Google Services JSON contents holding the Firebase configuration
        required: true
    dist_credentials_file:
        description: The path to the service account private key JSON file
        required: true
    dist_groups:
        description: The tester groups you want to distribute builds to.
        required: true
    dist_artifact_type:
        description: Specifies the app's file type. Can be set to "AAB" or "APK" (default).
        required: false
        default: APK
    dist_variant:
        description: Build variant, can be project-specific, especially with product flavors [release (default), debug]
        required: false
        default: release

runs:
    using: "composite"
    steps:
        -   name: Checkout project code
            uses: actions/checkout@v4

        -   name: Set up JDK 17
            uses: actions/setup-java@v4
            with:
                java-version: '17'
                distribution: 'adopt'
                cache: 'gradle'

        -   name: Grant execute permissions for gradlew
            shell: bash
            run: chmod +x ./gradlew

        -   name: Prepare Firebase services configuration
            shell: bash
            run: |
                echo '${{ inputs.google_services_json }}' > ${{ github.workspace }}/app/google-services.json

        -   name: Prepare Firebase App Distribution configuration
            shell: bash
            run: |
                echo '${{ inputs.dist_credentials_file }}' > photopixels-firebase-appdistribution-private-key.json
                echo 'PHOTOPIXELS_FIREBASE_APPDISTRIBUTION_CREDENTIALS_FILE=photopixels-firebase-appdistribution-private-key.json' > local.properties
                echo 'PHOTOPIXELS_FIREBASE_APPDISTRIBUTION_GROUPS=${{ inputs.dist_groups }}' >> local.properties
                echo 'PHOTOPIXELS_FIREBASE_APPDISTRIBUTION_ARTIFACT_TYPE=${{ inputs.dist_artifact_type }}' >> local.properties
                echo 'PHOTOPIXELS_FIREBASE_APPDISTRIBUTION_BUILD_VARIANTS=${{ inputs.dist_variant }}' >> local.properties
                
        -   name: Prepare release signing and project secrets configurations
            shell: bash
            env:
                ENCODED_STRING: ${{ secrets.KEYSTORE_BASE_64 }}
                RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
                RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
                RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
                GOOGLE_OAUTH_ANDROID_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH_ANDROID_CLIENT_ID }}
                GOOGLE_OAUTH_WEB_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH_WEB_CLIENT_ID }}
                GOOGLE_OAUTH_WEB_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH_WEB_CLIENT_SECRET }}
            run: |
                # Base64 decoding of keystore kept in temporary environment variable
                echo $ENCODED_STRING > keystore-b64.txt
                base64 -d keystore-b64.txt > keystore.jks
                
                # Create property file with signing configuration values
                echo "keystorePath=../keystore.jks" > keystore.properties
                echo "keystorePassword=$RELEASE_KEYSTORE_PASSWORD" >> keystore.properties
                echo "keyAlias=$RELEASE_KEY_ALIAS" >> keystore.properties
                echo "keyPassword=$RELEASE_KEY_PASSWORD" >> keystore.properties
                
                # Create property file with Google client IDs
                echo "GOOGLE_OAUTH_ANDROID_CLIENT_ID=$GOOGLE_OAUTH_ANDROID_CLIENT_ID" >> photopixels.properties
                echo "GOOGLE_OAUTH_WEB_CLIENT_ID=$GOOGLE_OAUTH_WEB_CLIENT_ID" >> photopixels.properties
                echo "GOOGLE_OAUTH_WEB_CLIENT_SECRET=$GOOGLE_OAUTH_WEB_CLIENT_SECRET" >> photopixels.properties
